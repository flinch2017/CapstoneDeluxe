<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>SPARK - Student Performance Visualizer</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    html, body {
  height: 100%;
  margin: 0;
  display: flex;
  flex-direction: column;
}

main {
  flex: 1;
}

    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      color: #333;
    }
    header {
      background-color: #4a148c;
      color: white;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: large;
    }
    .nav-buttons {
      display: flex;
      gap: 10px;
    }
    .nav-buttons a {
      text-decoration: none;
      color: #4a148c;
      background: white;
      padding: 8px 16px;
      border-radius: 5px;
      font-weight: bold;
    }
    .container {
      padding: 20px;
      text-align: center;
    }
    form {
      background: white;
      padding: 20px;
      border-radius: 10px;
      display: inline-block;
    }
    form input {
      margin: 10px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    canvas {
      margin-top: 30px;
      max-width: 800px;
      width: 100%;
    }
    table {
      border-collapse: collapse;
      margin: 20px auto;
      width: 80%;
      background: white;
    }
    table, th, td {
      border: 1px solid #aaa;
    }
    th, td {
      padding: 8px 10px;
    }
    button {
      margin: 10px;
      padding: 10px 15px;
      background-color: #4a148c;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background-color: #6a1b9a;
    }
    footer {
      background-color: #4a148c;
      color: white;
      text-align: center;
      padding: 15px 10px;
      margin-top: auto;
    }

    @media (max-width: 768px) {
  header {
    flex-direction: column;
    text-align: center;
    padding: 15px;
  }

  .nav-buttons {
    flex-direction: column;
    gap: 8px;
    margin-top: 10px;
  }

  form {
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }

  form input {
    width: 100%;
    box-sizing: border-box;
  }

  .container {
    padding: 10px;
  }

  table {
    width: 100%;
    font-size: 14px;
  }

  th, td {
    padding: 6px;
  }

  button {
    width: 100%;
    margin: 10px 0;
    box-sizing: border-box;
  }

  canvas {
    width: 100% !important;
    height: auto !important;
  }

  .container h2 {
    font-size: 20px;
  }

  footer p {
    font-size: 12px;
  }
}

@media (max-width: 480px) {
  header h1 {
    font-size: 24px;
  }

  .container ul {
    padding-left: 20px;
    font-size: 14px;
  }

  .container p, .container li {
    font-size: 14px;
  }

  input[type="file"] {
    width: 100%;
  }
}

  </style>
</head>
<body>

<header id="mainHeader">
  <h1 id="headerTitle">SPARK</h1>
</header>


<main>
    <div class="container">
  <h2>Student Performance Input</h2>

  

 <form onsubmit="handleSubmit(event)">
   <div style="margin-bottom: 20px; text-align: left;">

  <p>Please fill in the following details for each student:</p>
  <ul>
    <li><strong>Student ID:</strong> Unique identifier for the student (e.g., 2023-00123).</li>
    <li><strong>Previous GPA:</strong> Studentâ€™s Grade Point Average before the current term.</li>
    <li><strong>Midterm Grade:</strong> Grade received in the midterm exam.</li>
    <li><strong>Attendance Rate:</strong> Percentage of classes attended (e.g., 92.5).</li>
    <li><strong>Engagement Score:</strong> Score reflecting class participation or interaction.</li>
    <li><strong>At Risk (0 or 1):</strong> 1 if student is at academic risk, 0 if not.</li>
  </ul>
  <p>You can add one student at a time or upload a CSV file with multiple entries.</p>
</div>


  <input type="text" id="studentID" placeholder="Student ID" required />
  <input type="number" id="gpa" step="0.01" placeholder="Previous GPA" required />
  <input type="number" id="midterm" step="0.1" placeholder="Midterm Grade" required />
  <input type="number" id="attendance" step="0.1" placeholder="Attendance Rate" required />
  <input type="number" id="engagement" step="0.1" placeholder="Engagement Score" required />
  <input type="number" id="atRisk" min="0" max="1" placeholder="At Risk (0 or 1)" required />
  <button type="submit">Add Student</button>

  <div style="margin-top: 20px; text-align: center;">
    <span style="display: block; margin-bottom: 8px;">&mdash; or upload CSV &mdash;</span>
    <input type="file" accept=".csv" onchange="handleCSVUpload(event)" />
  </div>
</form>


  

  <div style="margin-top: 20px;">
    <button onclick="setView('charts')">Charts Only</button>
    <button onclick="setView('matrix')">Matrix Only</button>
    <button onclick="setView('both')">Show Both</button>
  </div>

  <div id="chartsSection" style="display:none;">
    <canvas id="gpaChart"></canvas>
    <canvas id="midtermChart"></canvas>
    <canvas id="attendanceChart"></canvas>
    <canvas id="engagementChart"></canvas>
    <canvas id="riskChart"></canvas>
    <canvas id="averageChart"></canvas>
    <canvas id="atRiskAverageChart"></canvas>
  </div>

  <div id="matrixSection" style="display:none;">
    <h3>Student Data Matrix</h3>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>GPA</th>
          <th>Midterm</th>
          <th>Attendance</th>
          <th>Engagement</th>
          <th>At-Risk</th>
        </tr>
      </thead>
      <tbody id="matrixBody"></tbody>
    </table>

    <h3>Averages (Mean) Matrix</h3>
    <table>
      <thead>
        <tr>
          <th>GPA</th>
          <th>Midterm</th>
          <th>Attendance</th>
          <th>Engagement</th>
          <th>At-Risk %</th>
        </tr>
      </thead>
      <tbody id="averageMatrixBody"></tbody>
    </table>
  </div>
</div>
</main>

<footer>
  <p>&copy; 2025 SPARK - Student Performance Analytics and Risk Knowledge for Retention Enhancement | Developed by Paulina B. Hurtado</p>
</footer>

<script>
  const studentData = [];

  let gpaChart, midtermChart, attendanceChart, engagementChart, riskChart, averageChart, atRiskAverageChart;
  let viewMode = 'charts';

  function handleSubmit(event) {
    event.preventDefault();

    const newStudent = {
      id: document.getElementById("studentID").value,
      gpa: parseFloat(document.getElementById("gpa").value),
      midterm: parseFloat(document.getElementById("midterm").value),
      attendance: parseFloat(document.getElementById("attendance").value),
      engagement: parseFloat(document.getElementById("engagement").value),
      atRisk: parseInt(document.getElementById("atRisk").value)
    };

    studentData.push(newStudent);
    renderCharts();
    event.target.reset();
  }

  function setView(mode) {
    viewMode = mode;
    renderCharts();
  }

  function renderCharts() {
    const chartSec = document.getElementById("chartsSection");
    const matrixSec = document.getElementById("matrixSection");

    // Show or hide sections based on data & viewMode
    if (studentData.length === 0) {
      chartSec.style.display = 'none';
      matrixSec.style.display = 'none';
      return;
    }

    if (viewMode === 'charts') {
      chartSec.style.display = 'block';
      matrixSec.style.display = 'none';
    } else if (viewMode === 'matrix') {
      chartSec.style.display = 'none';
      matrixSec.style.display = 'block';
    } else { // both
      chartSec.style.display = 'block';
      matrixSec.style.display = 'block';
    }

    const labels = studentData.map(s => s.id);
    const gpa = studentData.map(s => s.gpa);
    const midterm = studentData.map(s => s.midterm);
    const attendance = studentData.map(s => s.attendance);
    const engagement = studentData.map(s => s.engagement);
    const risk = studentData.map(s => s.atRisk);

    const avg = (arr) => arr.length > 0 ? arr.reduce((a, b) => a + b, 0) / arr.length : 0;

    const averages = [
      avg(gpa).toFixed(2),
      avg(midterm).toFixed(2),
      avg(attendance).toFixed(2),
      avg(engagement).toFixed(2)
    ];

    const atRiskPercentage = (avg(risk) * 100).toFixed(2);

    function makeLineChart(ctx, label, data) {
      return new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: label,
            data: data,
            fill: false,
            borderColor: '#4a148c',
            tension: 0.3
          }]
        }
      });
    }

    // Destroy previous charts
    [gpaChart, midtermChart, attendanceChart, engagementChart, riskChart, averageChart, atRiskAverageChart].forEach(chart => {
      if (chart) chart.destroy();
    });

    gpaChart = makeLineChart(document.getElementById("gpaChart"), "Previous GPA", gpa);
    midtermChart = makeLineChart(document.getElementById("midtermChart"), "Midterm Grades", midterm);
    attendanceChart = makeLineChart(document.getElementById("attendanceChart"), "Attendance Rate", attendance);
    engagementChart = makeLineChart(document.getElementById("engagementChart"), "Engagement Score", engagement);
    riskChart = makeLineChart(document.getElementById("riskChart"), "At-Risk (1 = Yes, 0 = No)", risk);

    averageChart = new Chart(document.getElementById("averageChart"), {
      type: 'bar',
      data: {
        labels: ['GPA', 'Midterm', 'Attendance', 'Engagement'],
        datasets: [{
          label: 'Average Score',
          data: averages,
          backgroundColor: '#6a1b9a'
        }]
      },
      options: {
        plugins: {
          title: {
            display: true,
            text: 'Averages Summary'
          }
        }
      }
    });

    atRiskAverageChart = new Chart(document.getElementById("atRiskAverageChart"), {
      type: 'bar',
      data: {
        labels: ['At-Risk %'],
        datasets: [{
          label: 'Mean At-Risk Percentage',
          data: [atRiskPercentage],
          backgroundColor: '#d32f2f'
        }]
      },
      options: {
        plugins: {
          title: {
            display: true,
            text: 'At-Risk Student Mean Percentage'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: (value) => value + '%'
            }
          }
        }
      }
    });

    // Matrix Table
    const matrixBody = document.getElementById("matrixBody");
    matrixBody.innerHTML = "";
    studentData.forEach(s => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${s.id}</td>
        <td>${s.gpa}</td>
        <td>${s.midterm}</td>
        <td>${s.attendance}</td>
        <td>${s.engagement}</td>
        <td>${s.atRisk === 1 ? "Yes" : "No"}</td>
      `;
      matrixBody.appendChild(row);
    });

    // Averages Matrix Table
    const avgBody = document.getElementById("averageMatrixBody");
    avgBody.innerHTML = `
      <tr>
        <td>${averages[0]}</td>
        <td>${averages[1]}</td>
        <td>${averages[2]}</td>
        <td>${averages[3]}</td>
        <td>${atRiskPercentage}%</td>
      </tr>
    `;
  }

  // Initially hide both sections (no data yet)
  renderCharts();
</script>

<script>
  function handleCSVUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      const contents = e.target.result;
      const lines = contents.split('\n');
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line === "" || i === 0) continue; // Skip header or empty

        const [id, gpa, midterm, attendance, engagement, atRisk] = line.split(',');

        if (!id || isNaN(gpa) || isNaN(midterm) || isNaN(attendance) || isNaN(engagement) || isNaN(atRisk)) {
          console.warn(`Skipping invalid line at ${i + 1}:`, line);
          continue;
        }

        studentData.push({
          id: id.trim(),
          gpa: parseFloat(gpa),
          midterm: parseFloat(midterm),
          attendance: parseFloat(attendance),
          engagement: parseFloat(engagement),
          atRisk: parseInt(atRisk)
        });
      }

      renderCharts();
    };
    reader.readAsText(file);
  }
</script>


</body>
</html>
